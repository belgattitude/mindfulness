# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union GenericMorph = ComponentTestPrice | ComponentTestTestcomp | Event | EventType | I18NLocale | Retraite | Test | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

union RetraiteDynaDynamicZone = ComponentTestPrice | ComponentTestTestcomp | Error

type ComponentTestPrice {
    id: ID!
    price: Int
}

type ComponentTestTestcomp {
    end: DateTime
    id: ID!
    start: DateTime
}

type Error {
    code: String!
    message: String
}

type Event {
    cover: UploadFileEntityResponse
    createdAt: DateTime
    description: String!
    end_at: DateTime!
    flyer: UploadFileEntityResponse
    publishedAt: DateTime
    slug: String!
    start_at: DateTime!
    summary: String
    title: String!
    universe: ENUM_EVENT_UNIVERSE
    updatedAt: DateTime
}

type EventEntity {
    attributes: Event
    id: ID
}

type EventEntityResponse {
    data: EventEntity
}

type EventEntityResponseCollection {
    data: [EventEntity!]!
    meta: ResponseCollectionMeta!
}

type EventType {
    createdAt: DateTime
    locale: String
    localizations(filters: EventTypeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): EventTypeRelationResponseCollection
    slug: String!
    title: String
    updatedAt: DateTime
}

type EventTypeEntity {
    attributes: EventType
    id: ID
}

type EventTypeEntityResponse {
    data: EventTypeEntity
}

type EventTypeEntityResponseCollection {
    data: [EventTypeEntity!]!
    meta: ResponseCollectionMeta!
}

type EventTypeRelationResponseCollection {
    data: [EventTypeEntity!]!
}

type I18NLocale {
    code: String
    createdAt: DateTime
    name: String
    updatedAt: DateTime
}

type I18NLocaleEntity {
    attributes: I18NLocale
    id: ID
}

type I18NLocaleEntityResponse {
    data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
    data: [I18NLocaleEntity!]!
    meta: ResponseCollectionMeta!
}

type Mutation {
    "Change user password. Confirm with the current password."
    changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    createEvent(data: EventInput!): EventEntityResponse
    createEventType(data: EventTypeInput!, locale: I18NLocaleCode): EventTypeEntityResponse
    createEventTypeLocalization(data: EventTypeInput, id: ID, locale: I18NLocaleCode): EventTypeEntityResponse
    createRetraite(data: RetraiteInput!): RetraiteEntityResponse
    createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
    createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
    "Create a new role"
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
    "Create a new user"
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
    deleteEvent(id: ID!): EventEntityResponse
    deleteEventType(id: ID!, locale: I18NLocaleCode): EventTypeEntityResponse
    deleteRetraite(id: ID!): RetraiteEntityResponse
    deleteTest: TestEntityResponse
    deleteUploadFile(id: ID!): UploadFileEntityResponse
    deleteUploadFolder(id: ID!): UploadFolderEntityResponse
    "Delete an existing role"
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
    "Delete an existing user"
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    "Confirm an email users email address"
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    "Request a reset password token"
    forgotPassword(email: String!): UsersPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
    "Register a user"
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    removeFile(id: ID!): UploadFileEntityResponse
    "Reset user password. Confirm with a code (resetToken from forgotPassword)"
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateEvent(data: EventInput!, id: ID!): EventEntityResponse
    updateEventType(data: EventTypeInput!, id: ID!, locale: I18NLocaleCode): EventTypeEntityResponse
    updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
    updateRetraite(data: RetraiteInput!, id: ID!): RetraiteEntityResponse
    updateTest(data: TestInput!): TestEntityResponse
    updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
    updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
    "Update an existing role"
    updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
    "Update an existing user"
    updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
    page: Int!
    pageCount: Int!
    pageSize: Int!
    total: Int!
}

type Query {
    event(id: ID): EventEntityResponse
    eventType(id: ID, locale: I18NLocaleCode): EventTypeEntityResponse
    eventTypes(filters: EventTypeFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): EventTypeEntityResponseCollection
    events(filters: EventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventEntityResponseCollection
    i18NLocale(id: ID): I18NLocaleEntityResponse
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
    me: UsersPermissionsMe
    retraite(id: ID): RetraiteEntityResponse
    retraites(filters: RetraiteFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RetraiteEntityResponseCollection
    test(publicationState: PublicationState = LIVE): TestEntityResponse
    uploadFile(id: ID): UploadFileEntityResponse
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
    uploadFolder(id: ID): UploadFolderEntityResponse
    uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
    usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
    pagination: Pagination!
}

type Retraite {
    cover: UploadFileEntityResponse
    createdAt: DateTime
    description: String
    dyna: [RetraiteDynaDynamicZone]
    end_at: DateTime
    images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    participants: String
    publishedAt: DateTime
    slug: String
    start_at: DateTime
    summary: String
    title: String
    updatedAt: DateTime
}

type RetraiteEntity {
    attributes: Retraite
    id: ID
}

type RetraiteEntityResponse {
    data: RetraiteEntity
}

type RetraiteEntityResponseCollection {
    data: [RetraiteEntity!]!
    meta: ResponseCollectionMeta!
}

type RetraiteRelationResponseCollection {
    data: [RetraiteEntity!]!
}

type Test {
    createdAt: DateTime
    publishedAt: DateTime
    retraites(filters: RetraiteFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RetraiteRelationResponseCollection
    title: String
    updatedAt: DateTime
}

type TestEntity {
    attributes: Test
    id: ID
}

type TestEntityResponse {
    data: TestEntity
}

type UploadFile {
    alternativeText: String
    caption: String
    createdAt: DateTime
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [GenericMorph]
    size: Float!
    updatedAt: DateTime
    url: String!
    width: Int
}

type UploadFileEntity {
    attributes: UploadFile
    id: ID
}

type UploadFileEntityResponse {
    data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
    data: [UploadFileEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
    data: [UploadFileEntity!]!
}

type UploadFolder {
    children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
    createdAt: DateTime
    files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    name: String!
    parent: UploadFolderEntityResponse
    path: String!
    pathId: Int!
    updatedAt: DateTime
}

type UploadFolderEntity {
    attributes: UploadFolder
    id: ID
}

type UploadFolderEntityResponse {
    data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
    data: [UploadFolderEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
    data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsPermission {
    action: String!
    createdAt: DateTime
    role: UsersPermissionsRoleEntityResponse
    updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
    attributes: UsersPermissionsPermission
    id: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
    data: [UsersPermissionsPermissionEntity!]!
}

type UsersPermissionsRole {
    createdAt: DateTime
    description: String
    name: String!
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    type: String
    updatedAt: DateTime
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
    attributes: UsersPermissionsRole
    id: ID
}

type UsersPermissionsRoleEntityResponse {
    data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
    data: [UsersPermissionsRoleEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime
    email: String!
    provider: String
    role: UsersPermissionsRoleEntityResponse
    updatedAt: DateTime
    username: String!
}

type UsersPermissionsUserEntity {
    attributes: UsersPermissionsUser
    id: ID
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
    data: [UsersPermissionsUserEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
    data: [UsersPermissionsUserEntity!]!
}

enum ENUM_EVENT_UNIVERSE {
    mindfulness
    yoga
}

enum PublicationState {
    LIVE
    PREVIEW
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A string used to identify an i18n locale"
scalar I18NLocaleCode

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar RetraiteDynaDynamicZoneInput

"The `Upload` scalar type represents a file upload."
scalar Upload

input BooleanFilterInput {
    and: [Boolean]
    between: [Boolean]
    contains: Boolean
    containsi: Boolean
    endsWith: Boolean
    eq: Boolean
    eqi: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    not: BooleanFilterInput
    notContains: Boolean
    notContainsi: Boolean
    notIn: [Boolean]
    notNull: Boolean
    null: Boolean
    or: [Boolean]
    startsWith: Boolean
}

input DateTimeFilterInput {
    and: [DateTime]
    between: [DateTime]
    contains: DateTime
    containsi: DateTime
    endsWith: DateTime
    eq: DateTime
    eqi: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    ne: DateTime
    not: DateTimeFilterInput
    notContains: DateTime
    notContainsi: DateTime
    notIn: [DateTime]
    notNull: Boolean
    null: Boolean
    or: [DateTime]
    startsWith: DateTime
}

input EventFiltersInput {
    and: [EventFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    end_at: DateTimeFilterInput
    id: IDFilterInput
    not: EventFiltersInput
    or: [EventFiltersInput]
    publishedAt: DateTimeFilterInput
    slug: StringFilterInput
    start_at: DateTimeFilterInput
    summary: StringFilterInput
    title: StringFilterInput
    universe: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input EventInput {
    cover: ID
    description: String
    end_at: DateTime
    flyer: ID
    publishedAt: DateTime
    slug: String
    start_at: DateTime
    summary: String
    title: String
    universe: ENUM_EVENT_UNIVERSE
}

input EventTypeFiltersInput {
    and: [EventTypeFiltersInput]
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    locale: StringFilterInput
    localizations: EventTypeFiltersInput
    not: EventTypeFiltersInput
    or: [EventTypeFiltersInput]
    slug: StringFilterInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input EventTypeInput {
    slug: String
    title: String
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FloatFilterInput {
    and: [Float]
    between: [Float]
    contains: Float
    containsi: Float
    endsWith: Float
    eq: Float
    eqi: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    not: FloatFilterInput
    notContains: Float
    notContainsi: Float
    notIn: [Float]
    notNull: Boolean
    null: Boolean
    or: [Float]
    startsWith: Float
}

input I18NLocaleFiltersInput {
    and: [I18NLocaleFiltersInput]
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: I18NLocaleFiltersInput
    or: [I18NLocaleFiltersInput]
    updatedAt: DateTimeFilterInput
}

input IDFilterInput {
    and: [ID]
    between: [ID]
    contains: ID
    containsi: ID
    endsWith: ID
    eq: ID
    eqi: ID
    gt: ID
    gte: ID
    in: [ID]
    lt: ID
    lte: ID
    ne: ID
    not: IDFilterInput
    notContains: ID
    notContainsi: ID
    notIn: [ID]
    notNull: Boolean
    null: Boolean
    or: [ID]
    startsWith: ID
}

input IntFilterInput {
    and: [Int]
    between: [Int]
    contains: Int
    containsi: Int
    endsWith: Int
    eq: Int
    eqi: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    not: IntFilterInput
    notContains: Int
    notContainsi: Int
    notIn: [Int]
    notNull: Boolean
    null: Boolean
    or: [Int]
    startsWith: Int
}

input JSONFilterInput {
    and: [JSON]
    between: [JSON]
    contains: JSON
    containsi: JSON
    endsWith: JSON
    eq: JSON
    eqi: JSON
    gt: JSON
    gte: JSON
    in: [JSON]
    lt: JSON
    lte: JSON
    ne: JSON
    not: JSONFilterInput
    notContains: JSON
    notContainsi: JSON
    notIn: [JSON]
    notNull: Boolean
    null: Boolean
    or: [JSON]
    startsWith: JSON
}

input PaginationArg {
    limit: Int
    page: Int
    pageSize: Int
    start: Int
}

input RetraiteFiltersInput {
    and: [RetraiteFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    end_at: DateTimeFilterInput
    id: IDFilterInput
    not: RetraiteFiltersInput
    or: [RetraiteFiltersInput]
    participants: StringFilterInput
    publishedAt: DateTimeFilterInput
    slug: StringFilterInput
    start_at: DateTimeFilterInput
    summary: StringFilterInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input RetraiteInput {
    cover: ID
    description: String
    dyna: [RetraiteDynaDynamicZoneInput!]
    end_at: DateTime
    images: [ID]
    participants: String
    publishedAt: DateTime
    slug: String
    start_at: DateTime
    summary: String
    title: String
}

input StringFilterInput {
    and: [String]
    between: [String]
    contains: String
    containsi: String
    endsWith: String
    eq: String
    eqi: String
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    not: StringFilterInput
    notContains: String
    notContainsi: String
    notIn: [String]
    notNull: Boolean
    null: Boolean
    or: [String]
    startsWith: String
}

input TestInput {
    publishedAt: DateTime
    retraites: [ID]
    title: String
}

input UploadFileFiltersInput {
    alternativeText: StringFilterInput
    and: [UploadFileFiltersInput]
    caption: StringFilterInput
    createdAt: DateTimeFilterInput
    ext: StringFilterInput
    folder: UploadFolderFiltersInput
    folderPath: StringFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    height: IntFilterInput
    id: IDFilterInput
    mime: StringFilterInput
    name: StringFilterInput
    not: UploadFileFiltersInput
    or: [UploadFileFiltersInput]
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    size: FloatFilterInput
    updatedAt: DateTimeFilterInput
    url: StringFilterInput
    width: IntFilterInput
}

input UploadFileInput {
    alternativeText: String
    caption: String
    ext: String
    folder: ID
    folderPath: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    size: Float
    url: String
    width: Int
}

input UploadFolderFiltersInput {
    and: [UploadFolderFiltersInput]
    children: UploadFolderFiltersInput
    createdAt: DateTimeFilterInput
    files: UploadFileFiltersInput
    id: IDFilterInput
    name: StringFilterInput
    not: UploadFolderFiltersInput
    or: [UploadFolderFiltersInput]
    parent: UploadFolderFiltersInput
    path: StringFilterInput
    pathId: IntFilterInput
    updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
    children: [ID]
    files: [ID]
    name: String
    parent: ID
    path: String
    pathId: Int
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
    action: StringFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    not: UsersPermissionsPermissionFiltersInput
    or: [UsersPermissionsPermissionFiltersInput]
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input UsersPermissionsRoleFiltersInput {
    and: [UsersPermissionsRoleFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: UsersPermissionsRoleFiltersInput
    or: [UsersPermissionsRoleFiltersInput]
    permissions: UsersPermissionsPermissionFiltersInput
    type: StringFilterInput
    updatedAt: DateTimeFilterInput
    users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
    description: String
    name: String
    permissions: [ID]
    type: String
    users: [ID]
}

input UsersPermissionsUserFiltersInput {
    and: [UsersPermissionsUserFiltersInput]
    blocked: BooleanFilterInput
    confirmationToken: StringFilterInput
    confirmed: BooleanFilterInput
    createdAt: DateTimeFilterInput
    email: StringFilterInput
    id: IDFilterInput
    not: UsersPermissionsUserFiltersInput
    or: [UsersPermissionsUserFiltersInput]
    password: StringFilterInput
    provider: StringFilterInput
    resetPasswordToken: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
    username: StringFilterInput
}

input UsersPermissionsUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    username: String
}
